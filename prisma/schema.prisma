generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DB_URL")
}

enum NotificationType {
  // Новое сообщение
  u_msg_in
  u_msg_out
  // Сообщение удалено
  u_msg_d_in
  u_msg_d_out
  // Сообщение редактировано
  u_msg_r_in
  u_msg_r_out
  // Сообщение прочитано
  u_msg_read_in
  u_msg_read_out

  // Новое приватное сообщение
  p_msg_in
  p_msg_out
  // Приватное сообщение удалено
  p_msg_d_in
  p_msg_d_out
  // Приватное сообщение редактировано
  p_msg_r_in
  p_msg_r_out
  // Приватное сообщение прочитано
  p_msg_read_in
  p_msg_read_out
  // Приватные сообщения прочитаны
  p_msg_read_all_in
  p_msg_read_all_out

  // Заявка в друзья
  fr_r_in
  fr_r_out
  // Удаление из друзей
  fr_d_in
  fr_d_out
  // Заявка в друзья принята
  fr_ra_in
  fr_ra_out
  // Заявка в друзья отменена
  fr_rc_in
  fr_rc_out

  // Диалог создан
  dlg_c_in
  dlg_c_out
  // Диалог обновлен
  dlg_u_in
  dlg_u_out
  // Диалог удален
  dlg_d_in
  dlg_d_out
  // Диалог в архиве
  dlg_a_in
  dlg_a_out

  // Приватный диалог создан
  pdlg_c_in
  pdlg_c_out
  // Приватный диалог обновлен
  pdlg_u_in
  pdlg_u_out
  // Приватный диалог удален
  pdlg_d_in
  pdlg_d_out
  // Приватный диалог восстановлен
  pdlg_du_in
  pdlg_du_out
  // Приватный диалог в архиве
  pdlg_a_in
  pdlg_a_out
  // Приватный диалог разархивирован
  pdlg_au_in
  pdlg_au_out

  // Пост создан
  pt_c_in
  pt_c_out
  // Пост обновлен
  pt_u_in
  pt_u_out
  // Пост удален
  pt_d_in
  pt_d_out
}

enum MessageType {
  text
  image
  link
}

enum UserPermissionsFriendRequest {
  all
  none
}

enum UserPermissionsPrivateDialogue {
  all
  friends
  none
}

enum UserPermissionsDialogue {
  all
  friends
  none
}

enum UserPermissionsGeneralPage {
  all
  friends
  none
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  login        String   @unique
  password     String
  email        String   @unique
  phoneNumber  String?  @default("")
  avatar       String?  @default("")
  firstName    String?  @default("")
  lastName     String?  @default("")
  creationDate DateTime @default(now())

  userRefreshToken         UserRefreshToken[]
  notifications            Notification[]
  connections              Connection[]
  friendsFrom              Friend[]           @relation("FriendFrom")
  friendsTo                Friend[]           @relation("FriendTo")
  friendRequestSend        FriendRequest[]    @relation(name: "FriendRequestSend")
  friendRequestReceived    FriendRequest[]    @relation(name: "FriendRequestReceived")
  linkWithDialogues        DialogueToUser[]
  messages                 Message[]
  createdPrivateDialogue   PrivateDialogue[]  @relation("CreatedPrivateDialogues")
  connectedPrivateDialogue PrivateDialogue[]  @relation("ConnectedPrivateDialogues")
  privateMessage           PrivateMessage[]
  posts                    Post[]
  permissions              UserPermissions?
}

model UserPermissions {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId

  friendRequest   UserPermissionsFriendRequest   @default(all)
  privateDialogue UserPermissionsPrivateDialogue @default(all)
  dialogue        UserPermissionsDialogue        @default(all)
  generalPage     UserPermissionsGeneralPage     @default(all)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRefreshToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  creationDate DateTime @default(now())
  userId       String   @db.ObjectId
  ip           String
  browser      String
  devise       String
  awaitDelete  Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  userId       String           @db.ObjectId
  creationDate DateTime         @default(now())
  type         NotificationType
  data         Json
  viewed       Boolean          @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
}

model Connection {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  connectionId String   @unique
  creationDate DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FriendRequest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId   String   @db.ObjectId
  toUserId     String   @db.ObjectId
  message      String   @default("")
  creationDate DateTime @default(now())

  fromUser User @relation(fields: [fromUserId], references: [id], name: "FriendRequestSend", onDelete: Cascade)
  toUser   User @relation(fields: [toUserId], references: [id], name: "FriendRequestReceived", onDelete: Cascade)

  @@index([fromUserId])
  @@index([toUserId])
}

model Friend {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId   String   @db.ObjectId
  toUserId     String   @db.ObjectId
  creationDate DateTime @default(now())

  fromUser User @relation(fields: [fromUserId], references: [id], name: "FriendFrom", onDelete: Cascade)
  toUser   User @relation(fields: [toUserId], references: [id], name: "FriendTo", onDelete: Cascade)

  @@index([fromUserId])
  @@index([toUserId])
}

model Dialogue {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String   @default("")
  avatar       String   @default("")
  creationDate DateTime @default(now())

  linkWithUsers DialogueToUser[]
  messages      Message[]
}

model DialogueToUser {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  dialogueId   String   @db.ObjectId
  userId       String   @db.ObjectId
  archive      Boolean  @default(false)
  creationDate DateTime @default(now())

  dialogue Dialogue @relation(fields: [dialogueId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Message {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  authorId     String      @db.ObjectId
  dialogueId   String      @db.ObjectId
  message      String
  type         MessageType @default(text)
  redacted     Boolean     @default(false)
  creationDate DateTime    @default(now())
  updatedDate  DateTime    @default(now())

  author   User     @relation(fields: [authorId], references: [id])
  dialogue Dialogue @relation(fields: [dialogueId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([dialogueId])
}

model PrivateDialogue {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String   @default("")
  avatar       String   @default("")
  creationDate DateTime @default(now())

  userInId  String @db.ObjectId
  userOutId String @db.ObjectId

  userInArchived  Boolean @default(false)
  userInDeleted   Boolean @default(false)
  userOutArchived Boolean @default(false)
  userOutDeleted  Boolean @default(false)

  userIn         User             @relation("CreatedPrivateDialogues", fields: [userInId], references: [id])
  userOut        User             @relation("ConnectedPrivateDialogues", fields: [userOutId], references: [id])
  privateMessage PrivateMessage[]

  @@index([userInId])
  @@index([userOutId])
}

model PrivateMessage {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  authorId          String      @db.ObjectId
  privateDialogueId String      @db.ObjectId
  message           String
  type              MessageType @default(text)
  redacted          Boolean     @default(false)
  read              Boolean     @default(false)
  creationDate      DateTime    @default(now())
  updatedDate       DateTime    @default(now())

  author   User            @relation(fields: [authorId], references: [id])
  dialogue PrivateDialogue @relation(fields: [privateDialogueId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([privateDialogueId])
}

model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId     String   @db.ObjectId
  message      String
  redacted     Boolean  @default(false)
  creationDate DateTime @default(now())

  author User @relation(fields: [authorId], references: [id])

  @@index([authorId])
}
