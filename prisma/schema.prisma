generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DB_URL")
}

enum NotificationType {
  u_msg
  u_msg_d
  u_msg_r
  u_msg_read
  fr_r
  fr_d
  fr_ra
  fr_rc
}

enum MessageType {
  text
  image
  link
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  login       String  @unique
  password    String
  email       String  @unique
  phoneNumber String? @default("")
  avatar      String? @default("")
  firstName   String? @default("")
  lastName    String? @default("")

  UserRefreshToken      UserRefreshToken[]
  Notification          Notification[]
  Connection            Connection[]
  FriendsFrom           Friend[]           @relation("FriendFrom")
  FriendsTo             Friend[]           @relation("FriendTo")
  FriendRequestSend     FriendRequest[]    @relation(name: "FriendRequestSend")
  FriendRequestReceived FriendRequest[]    @relation(name: "FriendRequestReceived")
  LinkWithDialogues     DialogueToUser[]
  Messages              Message[]
}

model FriendRequest {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId String @db.ObjectId
  toUserId   String @db.ObjectId

  FromUser User @relation(fields: [fromUserId], references: [id], name: "FriendRequestSend")
  ToUser   User @relation(fields: [toUserId], references: [id], name: "FriendRequestReceived")
}

model Friend {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId String @db.ObjectId
  toUserId   String @db.ObjectId

  FromUser User @relation(fields: [fromUserId], references: [id], name: "FriendFrom")
  ToUser   User @relation(fields: [toUserId], references: [id], name: "FriendTo")

  @@index([fromUserId])
  @@index([toUserId])
}

model UserRefreshToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  creationDate DateTime @default(now())
  userId       String   @db.ObjectId
  ip           String
  browser      String
  devise       String
  awaitDelete  Boolean  @default(false)

  User User @relation(fields: [userId], references: [id])
}

model Notification {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  userId       String           @db.ObjectId
  creationDate DateTime         @default(now())
  type         NotificationType
  data         Json
  viewed       Boolean          @default(false)

  User User @relation(fields: [userId], references: [id])

  @@index([type])
}

model Connection {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  connectionId String @unique

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Dialogue {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  title  String @default("")
  avatar String @default("")

  LinkWithUsers    DialogueToUser[]    @relation()
  LinkWithMessages DialogueToMessage[] @relation()
}

model DialogueToUser {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  dialogueId String  @db.ObjectId
  userId     String  @db.ObjectId
  archive    Boolean @default(false)

  Dialogue Dialogue @relation(fields: [dialogueId], references: [id])
  User     User     @relation(fields: [userId], references: [id])

  @@index([userId, archive])
}

model DialogueToMessage {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  dialogueId String @db.ObjectId
  messageId  String @db.ObjectId

  Dialogue Dialogue @relation(fields: [dialogueId], references: [id])
  Message  Message  @relation(fields: [messageId], references: [id])
}

model Message {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  authorId     String      @db.ObjectId
  message      String
  type         MessageType
  redacted     Boolean     @default(false)
  creationDate DateTime    @default(now())

  Author            User                @relation(fields: [authorId], references: [id])
  LinkWithDialogues DialogueToMessage[]
}
